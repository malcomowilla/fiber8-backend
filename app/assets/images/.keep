
  require 'net/http'
  require 'uri'
  require 'json'
  # GET /p_poe_packages or /p_poe_packages.json

  # def index
  #   @packages = PPoePackage.all # Convert ActiveRecord objects to hashes

    


  #     # packages = @packages.map { |package| package.as_json }
  
  #     # # Broadcast the packages to the PpoePackagesChannel
  #     # ActionCable.server.broadcast 'PpoePackagesChannel', packages
      
  # end



  def show
    poe = PPoePackage.find_by(id: params[:id])
    render json: poe
  end

  # GET /p_poe_packages/1 or /p_poe_packages/1.json
  def index

    @p_poe_package = PPoePackage.all
 
    render json: @p_poe_package
  end

  # POST /p_poe_packages or /p_poe_packages.json
  def create

    # ActsAsTenant.with_tenant(current_user.account) do
      ppoe_package_creation
    if  ppoe_package_creation.save
      
      render json: ppoe_package_creation, status: :created
    # ActionCable.server.broadcast("ppoe_packages_channel", message: 'Package Sucessfully Created' )
  else
  
    render json: {error: 'Unprocessable Entity'}, status: :unprocessable_entity
    # ActionCable.server.broadcast("ppoe_packages_channel", error: 'Unprocessable Entity' )

  end


      # end
      
 
    
#   user1 = 'user1'
#   password = ''
#   name = p_poe_package_params[:name]
#     download_limit = p_poe_package_params[:download_limit]
#     upload_limit = p_poe_package_params[:upload_limit]
#     validity = p_poe_package_params[:validity]


#   request_body1={
#     name: name,
#   validity: validity
#   }
# uri = URI('http://192.168.88.1/rest/user-manager/profile/add')
# request = Net::HTTP::Post.new(uri)
# request.basic_auth user1, password
# request.body = request_body1.to_json

# request['Content-Type'] = 'application/json'

#   response = Net::HTTP.start(uri.hostname, uri.port) do |http|
#     http.request(request)
#   end

#   if response.is_a?(Net::HTTPSuccess)
#     data = JSON.parse(response.body)
#     puts data
#   else
#     puts "Failed to post name and validty: #{response.code} - #{response.message}"
#   end


#   request_body2 = {
    
#     "download-limit" => download_limit,
#     "upload-limit" => upload_limit,
# "name" => name

#   }


# uri = URI('http://192.168.88.1/rest/user-manager/limitation/add')
# request = Net::HTTP::Post.new(uri)
# request.basic_auth user1, password
# request.body = request_body2.to_json

# request['Content-Type'] = 'application/json'

# response = Net::HTTP.start(uri.hostname, uri.port) do |http|
#   http.request(request)
# end

# if response.is_a?(Net::HTTPSuccess)
#   data = JSON.parse(response.body)
#   puts data
# else
#   puts "Failed to post upload and download limit : #{response.code} - #{response.message}"
# end
    






  end

  private
    # Use callbacks to share common setup or constraints between actions.
  

    # Only allow a list of trusted parameters through.
    def p_poe_package_params
      params.require(:p_poe_package).permit(:name, :download_limit, :upload_limit, :price, :validity,
       )
    end
def ppoe_package_creation
  @p_poe_package = PPoePackage.create(p_poe_package_params)

end


# const createPackage = async (e) => {
#   e.preventDefault();
#   try {
#     setofflineerror(true);
#     setloading(true);
#     const response = await fetch('/api/create_package', {
#       method: 'POST',
#       headers: {
#         'Content-Type': 'application/json',
#         'Authorization': 'Basic ' + btoa(`${username}:${password}`) // Include username and password
#       },
#       body: JSON.stringify(formData),
#     });

#     setofflineerror(false);
#     let newData = await response.json();

#     if (response.ok) {
#       setloading(false);
#       setShowNotification(true);
#       setofflineerror(false);
#       setTableData((tableData) => [...tableData, newData]);
#       setFormData(newData);
#     } else {
#       setloading(false);
#     }
#   } catch (error) {
#     console.log(error.name === 'AbortError');
#     setloading(false);
#     setofflineerror(false);
#   }
# };








# def create
#   @p_poe_package = PPoePackage.create(p_poe_package_params)

#   if @p_poe_package
#     # Extract username and password from request headers
#     username, password = extract_username_password_from_headers(request.headers)

#     # Now you can use these credentials to communicate with the router
#     # For example, you can make HTTP requests to the router with Net::HTTP

#     render json: @p_poe_package, status: :created
#   else
#     render json: { error: 'Unprocessable Entity' }, status: :unprocessable_entity
#   end
# end

# private

# def p_poe_package_params
#   params.require(:p_poe_package).permit(:name, :download_limit, :upload_limit, :price, :validity, :upload_burst_limit,
#                                          :download_burst_limit, :tx_rate_limit, :rx_rate_limit, :validity_period_units)
# end

# def extract_username_password_from_headers(headers)
#   authorization_header = headers['Authorization']
#   if authorization_header && authorization_header.start_with?('Basic ')
#     decoded_credentials = Base64.decode64(authorization_header.split(' ')[1])
#     username, password = decoded_credentials.split(':')
#     return username, password
#   end

#   # Return default credentials or handle error cases
#   return nil, nil
# end



# const handleSubmit = (e) => {
#   e.preventDefault();
#   const username = document.getElementById('username').value;
#   const password = document.getElementById('password').value;
#   const ipAddress = document.getElementById('ipAddress').value;
#   createPackage(e, username, password, ipAddress);
# };





# const createPackage = async (e, username, password, ipAddress) => {
#   e.preventDefault();
#   try {
#     setofflineerror(true);
#     setloading(true);
#     const response = await fetch('/api/create_package', {
#       method: 'POST',
#       headers: {
#         'Content-Type': 'application/json',
#         'Authorization': 'Basic ' + btoa(`${username}:${password}`),
#         'X-Router-IP': ipAddress // Include the router's IP address
#       },
#       body: JSON.stringify(formData),
#     });

#     setofflineerror(false);
#     let newData = await response.json();

#     if (response.ok) {
#       setloading(false);
#       setShowNotification(true);
#       setofflineerror(false);
#       setTableData((tableData) => [...tableData, newData]);
#       setFormData(newData);
#     } else {
#       setloading(false);
#     }
#   } catch (error) {
#     console.log(error.name === 'AbortError');
#     setloading(false);
#     setofflineerror(false);
#   }







# };













class PPoePackagesController < ApplicationController
  rescue_from ActiveRecord::RecordNotFound, with: :not_found_response

set_current_tenant_through_filter






  require 'net/http'
  require 'uri'
  require 'json'
  # GET /p_poe_packages or /p_poe_packages.json

  # def index
  #   @packages = PPoePackage.all # Convert ActiveRecord objects to hashes

before_action :set_my_tenant

  #     # packages = @packages.map { |package| package.as_json }
  
  #     # # Broadcast the packages to the PpoePackagesChannel
  #     # ActionCable.server.broadcast 'PpoePackagesChannel', packages
      
  # end



  def set_my_tenant
    set_current_tenant(current_user.account)
  end


  # def show
  #   poe = PPoePackage.find_by(id: params[:id])
  #   render json: poe
  # end

  # GET /p_poe_packages/1 or /p_poe_packages/1.json
  def index
   
     
  
    @p_poe_package = PPoePackage.all
 
    render json: @p_poe_package
  end


  
  # POST /p_poe_packages or /p_poe_packages.json
  
  def create

    # ActsAsTenant.with_tenant(current_user.account) do

    
    @p_poe_package = PPoePackage.create(p_poe_package_params)

    if  @p_poe_package
     
      render json:  @p_poe_package, status: :created
    # ActionCable.server.broadcast("ppoe_packages_channel", message: 'Package Sucessfully Created' )
  else
  
    render json: {error: 'Unprocessable Entity'}, status: :unprocessable_entity
    # ActionCable.server.broadcast("ppoe_packages_channel", error: 'Unprocessable Entity' )

  end




      
      session[:router_name] = params[:router_name]


      router_name = session[:router_name]

      nas_router = NasRouter.find_by(name: router_name)
    if nas_router
      router_ip_address = nas_router.ip_address
        router_password = nas_router.password
       router_username = nas_router.username
       puts router_username 
    
    else
    
      puts 'router not found'
    end
  
      router_name = params[:router_name]
      nas_router = NasRouter.find_by(name: router_name)
    if nas_router
      router_ip_address = nas_router.ip_address
        router_password = nas_router.password
       router_username = nas_router.username

    else

      puts 'router not found'
    end

  
    
  user1 = router_username
  password = router_password
  name = package_params[:name]
    download_limit = package_params[:download_limit]
    upload_limit = package_params[:upload_limit]
    validity = package_params[:validity]
    validity_period_units = package_params[:validity_period_units]
    price =  package_params[:price]
    tx_rate_limit=  package_params[:tx_rate_limit]
    rx_rate_limit = package_params[:rx_rate_limit]
  upload_burst_limit = package_params[:upload_burst_limit]
  download_burst_limit = package_params[:download_burst_limit]

  
 validity_period =   if validity_period_units == 'days'
  "#{validity}d 00:00:00"

  elsif validity_period_units == 'hours'
     "#{validity}:00:00"
  
    # Handle other units if necessary
  end

  

  
  request_body1={
    name: name,
  validity: validity_period ,
  price: price
  }


uri = URI("http://#{router_ip_address}/rest/user-manager/profile/add")
request = Net::HTTP::Post.new(uri)

request.basic_auth user1, password
request.body = request_body1.to_json

request['Content-Type'] = 'application/json'

  response = Net::HTTP.start(uri.hostname, uri.port) do |http|
    http.request(request)
  end

  if response.is_a?(Net::HTTPSuccess)
    data = JSON.parse(response.body)
    puts data
  else
    puts "Failed to post name and validty: #{response.code} - #{response.message}"
  end












  request_body2 = {
    
    "download-limit" => download_limit,
    "upload-limit" => upload_limit,
"name" => name,
"rate-limit-rx" => "#{rx_rate_limit}M",
"rate-limit-tx" => "#{tx_rate_limit}M",
"rate-limit-burst-rx" => "#{upload_burst_limit}M",
"rate-limit-burst-tx" => "#{download_burst_limit}M",
"uptime-limit" => validity_period
  }


uri = URI("http://#{router_ip_address}/rest/user-manager/limitation/add")
request = Net::HTTP::Post.new(uri)

request.basic_auth user1, password
request.body = request_body2.to_json

request['Content-Type'] = 'application/json'

response = Net::HTTP.start(uri.hostname, uri.port) do |http|
  http.request(request)
end

if response.is_a?(Net::HTTPSuccess)
  data = JSON.parse(response.body)
  puts data
else
  puts "Failed to post upload and download limit : #{response.code} - #{response.message}"
end
    









request_body3 = {
    
profile:  name,
limitation: name
}



uri = URI("http://#{router_ip_address}/rest/user-manager/profile-limitation/add")
request = Net::HTTP::Post.new(uri)
request.basic_auth user1, password
request.body = request_body3.to_json

request['Content-Type'] = 'application/json'

response = Net::HTTP.start(uri.hostname, uri.port) do |http|
  http.request(request)
end

if response.is_a?(Net::HTTPSuccess)
  data = JSON.parse(response.body)
  puts data
else
  puts "Failed to post profile limitation: #{response.code} - #{response.message}"
end
    





  end



  def delete
  #   router_name = session[:router_name]

  #   nas_router = NasRouter.find_by(name: router_name)
  # if nas_router
  #   router_ip_address = nas_router.ip_address
  #     router_password = nas_router.password
  #    router_username = nas_router.username
  #    puts router_username 
  
  # else
  
  #   puts 'router not found'
  # end
  
  
  
  # user1 = router_username
  # password = router_password
    
  # id = params[:id]
  # uri = URI("http://#{router_ip_address}/rest/user-manager/profile/#{id}")
  # request = Net::HTTP::Delete.new(uri)
  # request.basic_auth user1, password
  
  
  # response = Net::HTTP.start(uri.hostname, uri.port) do |http|
  #   http.request(request)
  # end
  
  # if response.is_a?(Net::HTTPSuccess)
  #   data = JSON.parse(response.body)
  #   puts data
  # else
  #   puts "Failed to delete profile: #{response.code} - #{response.message}"
  # end
      
  
  
  
    package = PPoePackage.find_by(id: params[:id])

if package
  package.destroy
  head :no_content
else
  render json: { error: "Package not found" }, status: :not_found
end

  end




  private
    # Use callbacks to share common setup or constraints between actions.
  

    # Only allow a list of trusted parameters through.
    def p_poe_package_params
      params.require(:p_poe_package).permit(:name, :download_limit, :upload_limit, :price, :validity, :upload_burst_limit,
      :download_burst_limit, :tx_rate_limit, :rx_rate_limit,  :validity_period_units
       )
    end


def not_found_response
  render json: { error: "Package not found" }, status: :not_found
end



end


































class PPoePackage < ApplicationRecord
  require 'securerandom'


# after_create_commit :broadcast_creation
# after_rollback :broadcast_creation_failure
    # after_commit :broadcast_packages
    validates :name, uniqueness: true
    validates :price, uniqueness: true
acts_as_tenant(:account)
# self.primary_key = 'id'
before_create :assign_uuid_to_id

# def assign_uuid_to_id
#   self.id ||= SecureRandom.uuid
# end
private
def assign_uuid_to_id
  self.id ||= SecureRandom.uuid
end
# def broadcast_creation
#     ActionCable.server.broadcast("ppoe_packages_channel", message: 'Package Succesfully created', package: self.to_json)
    
# end




def broadcast_packages

# package_data = {
#     name: self.name
# }
#     packages = PPoePackage.all
#     puts packages
#     ActionCable.server.broadcast("ppoe_packages_channel", packages)
  end
# def broadcast_creation_failure
#   ActionCable.server.broadcast("ppoe_packages_channel", error: 'Package Creation Failed', package: self.to_json )
# end
end


























create_table "p_poe_packages", id: false, force: :cascade do |t|
  t.string "name"
  t.integer "price"
  t.string "download_limit"
  t.string "upload_limit"
  t.datetime "created_at", null: false
  t.datetime "updated_at", null: false
  t.integer "account_id"
  t.string "tx_rate_limit"
  t.string "rx_rate_limit"
  t.string "validity_period_units"
  t.string "download_burst_limit"
  t.string "upload_burst_limit"
  t.string "validity"
  t.string "mikrotik_id"
  t.integer "id"
end













class PpoePackagesChannel < ApplicationCable::Channel
  # def subscribed
  #   stream_from "PpoePackagesChannel"

  #   broadcast_packages

  # end

  # def broadcast_packages


  #     @packages = PPoePackage.all
  #     packages = @packages.map { |package| package.as_json }
  
  #     ActionCable.server.broadcast 'PpoePackagesChannel', packages
    

  # end

  def unsubscribed
    # Any cleanup needed when channel is unsubscribed
  end
end



















class SubscribersController < ApplicationController
  # before_action :set_subscriber, only: %i[ show edit update destroy ]
  rescue_from ActiveRecord::RecordNotFound, with: :subscriber_not_found_response
  rescue_from ActiveRecord::RecordInvalid, with: :subscriber_invalid

  set_current_tenant_through_filter

  before_action :set_my_tenant

  def set_my_tenant
    set_current_tenant(current_user.account)
  end

  # GET /subscribers or /subscribers.json
  def index
    @subscribers = Subscriber.all
    render json: @subscribers
  end

  # GET /subscribers/1 or /subscribers/1.json
  def show
  end

  # POST /subscribers or /subscribers.json
  def create
    @subscriber = Subscriber.new(subscriber_params)
    @account = Account.find_by(domain: request.domain)

    if @account.respond_to?(:prefix_and_digits)
      Rails.logger.info "prefix_and_digits association exists"
      @prefix_and_digit = @account.prefix_and_digits.first
      if @prefix_and_digit.present?
        found_prefix = @prefix_and_digit.prefix
        found_digit = @prefix_and_digit.minimum_digits
        Rails.logger.info "Prefix: #{found_prefix}, Digits: #{found_digit}"
      else
        Rails.logger.error "PrefixAndDigit not found for the account"
        render json: { error: "PrefixAndDigit not found for the account" }, status: :unprocessable_entity
        return
      end
    else
      Rails.logger.error "prefix_and_digits association does not exist"
      render json: { error: "Account does not have a 'prefix_and_digits' relationship" }, status: :unprocessable_entity
      return
    end

    auto_generated_no = "#{found_prefix}#{Subscriber.maximum(:sequence_number).to_i.next.to_s.rjust(found_digit, '0')}" if found_prefix && found_digit

    if params[:use_auto_generated_pppoe_username]
      @subscriber.pppoe_username = auto_generated_no
    end

    @subscriber.ref_no = auto_generated_no

    if @subscriber.save!
      render json: @subscriber, status: :created
    else
      render json: @subscriber.errors, status: :unprocessable_entity
    end
  end

  def get_general_settings
    @account = Account.find_by(domain: request.domain)
    if @account.respond_to?(:prefix_and_digits)
      Rails.logger.info "prefix_and_digits association exists"
      @prefix = @account.prefix_and_digits.all
      render json: @prefix, status: :created
    else
      Rails.logger.error "prefix_and_digits association does not exist"
      render json: { error: "Account does not have a 'prefix_and_digits' relationship" }, status: :unprocessable_entity
    end
  end

  def update_general_settings
    @account = Account.find_by(domain: request.domain)
    if @account.respond_to?(:prefix_and_digits)
      Rails.logger.info "prefix_and_digits association exists"
      @prefix = @account.prefix_and_digits.first_or_initialize(prefix: params[:prefix], minimum_digits: params[:minimum_digits])
      @prefix.update(prefix: params[:prefix], minimum_digits: params[:minimum_digits])
      @prefix.user = current_user

      if @prefix.save
        Rails.logger.info "PrefixAndDigit created successfully: #{@prefix.inspect}"
        render json: @prefix, status: :created
      else
        Rails.logger.error "Failed to create PrefixAndDigit: #{@prefix.errors.full_messages.join(", ")}"
        render json: @prefix.errors, status: :unprocessable_entity
      end
    else
      Rails.logger.error "prefix_and_digits association does not exist"
      render json: { error: "Account does not have a 'prefix_and_digits' relationship" }, status: :unprocessable_entity
    end

    if @account.respond_to?(:subscribers)
      Rails.logger.info "subscribers association exists"
      @subscriber = @account.subscribers.all.ref_no

      if params[:check_update_username] == true
        Subscriber.update_all(pppoe_username: @subscriber)
      end

      if params[:check_update_password] == true
        Subscriber.update_all(pppoe_password: @subscriber)
      end
    else
      render json: { error: "Account does not have a 'subscribers' relationship" }, status: :unprocessable_entity
    end
  end

  def update
    found_subscriber = set_subscriber
    if found_subscriber.update(subscriber_params)
      render json: found_subscriber
    else
      render json: found_subscriber.errors, status: :unprocessable_entity
    end
  end

  def delete
    found_subscriber = set_subscriber
    found_subscriber.destroy
    head :no_content
  end

  private

  def subscriber_invalid(invalid)
    render json: { error: invalid.record.errors.full_messages }, status: :unprocessable_entity
  end

  def subscriber_not_found_response
    render json: { error: "Subscriber Not Found" }, status: :not_found
  end

  def set_subscriber
    @subscriber = Subscriber.find_by(id: params[:id])
  end

  def subscriber_prefix_prefered_no_digits_params
    params.permit(:prefix, :minimum_digits)
  end

  def prefix_and_digits_params
    params.require(:prefix_and_digit).permit(:prefix, :minimum_digits)
  end

  def subscriber_params
    params.require(:subscriber).permit(:name, :phone_number, :ppoe_username, :ppoe_password, :email, :ppoe_package,
                                       :date_registered, :ref_no, :valid_until, :package_name, :installation_fee, :subscriber_discount, :second_phone_number)
  end
end
Front-End Changes
Assuming you are using React, update the form to include a checkbox for the auto-generated PPPoE username:

javascript
Copy code
import React, { useState } from 'react';

const SubscriberDetails = ({ handleClose, formData, createSubscriber, handleChangeForm, setFormData, isloading }) => {
  const { name, ref_no, ppoe_password, ppoe_username, phone_number, email, second_phone_number, package_name, installation_fee, subscriber_discount, date_registered } = formData;

  const [useAutoGeneratedPppoeUsername, setUseAutoGeneratedPppoeUsername] = useState(false);

  const handleSubmit = (event) => {
    event.preventDefault();
    createSubscriber({ ...formData, use_auto_generated_pppoe_username: useAutoGeneratedPppoeUsername });
  };

  return (
    <form onSubmit={handleSubmit}>
      {/* existing form fields */}
      <div>
        <input
          type="checkbox"
          id="autoGeneratedPppoeUsername"
          checked={useAutoGeneratedPppoeUsername}
          onChange={(e) => setUseAutoGeneratedPppoeUsername(e.target.checked)}
        />
        <label htmlFor="autoGeneratedPppoeUsername">Use Auto-Generated Number as PPPoE Username</label>
      </div>
      {/* submit button and other form elements */}
    </form>
  );
};

export default SubscriberDetails;