class SubscriberSettingsController < ApplicationController
  # before_action :set_subscriber_setting, only: %i[ show edit update destroy ]
  load_and_authorize_resource except: [:get_allow_subcriber_setting]
  before_action :update_last_activity









 def update_last_activity
if current_user
      current_user.update!(last_activity_active:Time.current)
    end
    
  end






  # GET /subscriber_settings or /subscriber_settings.json
  def index
    @subscriber_settings = SubscriberSetting.all
    render json: @subscriber_settings
  end




  set_current_tenant_through_filter
before_action :set_tenant

def set_tenant

  host = request.headers['X-Subdomain']
  @account = Account.find_by(subdomain: host)


  set_current_tenant(@account)
rescue ActiveRecord::RecordNotFound
  render json: { error: 'Invalid tenant' }, status: :not_found

  
end

  def get_allow_subcriber_setting
    @subscriber_settings = SubscriberSetting.all
    render json: @subscriber_settings
  end

  
  # POST /subscriber_settings or /subscriber_settings.json
  def create
    @subscriber_setting = SubscriberSetting.first_or_initialize(subscriber_setting_params)
    @subscriber_setting.update(subscriber_setting_params) 

      if @subscriber_setting.save
      render json: @subscriber_setting, status: :created 
      else
        render json: @subscriber_setting.errors, status: :unprocessable_entity 
      end
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_subscriber_setting
      @subscriber_setting = SubscriberSetting.find(params[:id])
    end

    # Only allow a list of trusted parameters through.
    def subscriber_setting_params
      params.require(:subscriber_setting).permit(:prefix, :minimum_digits, :account_id, 
      :use_autogenerated_number_as_ppoe_username, :notify_user_account_created, 
      :send_reminder_sms_expiring_subscriptions, :use_autogenerated_number_as_ppoe_password, 
      :enable_customer_portal, :installation_fee)
    end


end


